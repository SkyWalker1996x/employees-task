{"version":3,"sources":["store/action-types.ts","store/reducers/employeesReducer.ts","store/index.ts","utils/localStorage.ts","store/actions/employeesActions.ts","services/employees-service.ts","components/AlphabetEmployeesList/LetterEmployeeItem.tsx","components/AlphabetEmployeesList/LetterItem.tsx","components/AlphabetEmployeesList/index.tsx","utils/employees.ts","components/MonthEmployeesList/MonthEmployeeItem.tsx","components/MonthEmployeesList/MonthItem.tsx","components/MonthEmployeesList/index.tsx","pages/Employees.tsx","pages/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["FETCH_LOAD","FETCH_SUCCESS","FETCH_ERROR","ADD_SELECTED_ITEM","REMOVE_SELECTED_ITEM","initialState","loading","error","items","selectedItems","persistedState","serializedStore","localStorage","getItem","JSON","parse","e","console","log","loadFromLocalStorage","store","createStore","state","action","type","payload","filter","item","id","composeWithDevTools","applyMiddleware","thunk","subscribe","stringify","setItem","saveToLocalStorage","getState","getEmployees","_apiBase","get","path","a","fetch","res","ok","Error","status","json","fetchEmployees","dispatch","then","data","catch","err","LetterEmployeeItem","employee","firstName","lastName","selected","useSelector","findIndex","useDispatch","onChangeValue","event","target","value","addSelectedItem","className","onChange","checked","LetterItem","letter","length","map","AlphabetEmployeesList","list","sortField","alphabetEmployeesList","Array","from","idx","String","fromCharCode","sortItems","toUpperCase","sort","b","sortFieldA","sortFieldB","index","MonthEmployeeItem","dob","birthday","moment","format","MonthItem","month","MonthEmployeesList","monthList","monthsArray","i","Date","toLocaleDateString","firstPart","slice","secondPart","transformToMonthList","Employees","useEffect","NotFoundPage","App","exact","to","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87f90d5e.chunk.js","sourcesContent":["export const FETCH_LOAD = 'FETCH_LOAD';\r\nexport const FETCH_SUCCESS = 'FETCH_SUCCESS';\r\nexport const FETCH_ERROR = 'FETCH_LOAD';\r\nexport const ADD_SELECTED_ITEM = 'ADD_SELECTED_ITEM';\r\nexport const REMOVE_SELECTED_ITEM = 'REMOVE_SELECTED_ITEM';\r\n","import { EmployeesState } from 'interfaces/Employees';\r\nimport {\r\n  FETCH_LOAD,\r\n  FETCH_SUCCESS,\r\n  FETCH_ERROR,\r\n  ADD_SELECTED_ITEM,\r\n  REMOVE_SELECTED_ITEM,\r\n} from 'store/action-types';\r\n\r\nconst initialState: EmployeesState = {\r\n  loading: false,\r\n  error: false,\r\n  items: [],\r\n  selectedItems: [],\r\n};\r\n\r\nexport const employeesReducer = (state = initialState, action: any) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case FETCH_LOAD:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case FETCH_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        items: payload,\r\n      };\r\n    case FETCH_ERROR:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: payload,\r\n      };\r\n    case ADD_SELECTED_ITEM:\r\n      return {\r\n        ...state,\r\n        selectedItems: [...state.selectedItems, payload],\r\n      };\r\n    case REMOVE_SELECTED_ITEM:\r\n      return {\r\n        ...state,\r\n        selectedItems: state.selectedItems.filter(item => item.id !== payload),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n// utils\r\nimport { loadFromLocalStorage, saveToLocalStorage } from 'utils/localStorage';\r\n// reducer\r\nimport { employeesReducer } from 'store/reducers/employeesReducer';\r\n\r\nconst persistedState = loadFromLocalStorage();\r\n\r\nexport const store = createStore(\r\n  employeesReducer,\r\n  persistedState,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nstore.subscribe(() => {\r\n  saveToLocalStorage(store.getState());\r\n});\r\n","import { LoadFromLocalStorage, SaveToLocalStorage } from 'interfaces/Utils';\r\n\r\nexport const loadFromLocalStorage: LoadFromLocalStorage = () => {\r\n    try {\r\n        const serializedStore = localStorage.getItem('state');\r\n        if (serializedStore === null) return undefined;\r\n        return JSON.parse(serializedStore);\r\n    } catch (e) {\r\n        console.log(e);\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveToLocalStorage: SaveToLocalStorage = (state) => {\r\n    try {\r\n        const serializedStore = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedStore);\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n};\r\n","import { EmployeesService } from 'services/employees-service';\r\nimport {\r\n  FETCH_LOAD,\r\n  FETCH_SUCCESS,\r\n  FETCH_ERROR,\r\n  ADD_SELECTED_ITEM,\r\n  REMOVE_SELECTED_ITEM,\r\n} from 'store/action-types';\r\nimport { Employee } from 'interfaces/Employees';\r\n\r\nconst { getEmployees } = new EmployeesService();\r\n\r\nexport const fetchEmployeesLoad = () => ({\r\n  type: FETCH_LOAD,\r\n});\r\n\r\nexport const fetchEmployeesSuccess = (employees: []) => ({\r\n  type: FETCH_SUCCESS,\r\n  payload: employees,\r\n});\r\n\r\nexport const fetchEmployeesError = (error: string) => ({\r\n  type: FETCH_ERROR,\r\n  payload: error,\r\n});\r\n\r\nexport const fetchEmployees = () => (dispatch: any) => {\r\n  dispatch(fetchEmployeesLoad());\r\n\r\n  getEmployees()\r\n    .then(data => {\r\n      dispatch(fetchEmployeesSuccess(data));\r\n    })\r\n    .catch(err => {\r\n      dispatch(fetchEmployeesError(err));\r\n    });\r\n};\r\n\r\nexport const addSelectedItem = (employee: Employee) => ({\r\n  type: ADD_SELECTED_ITEM,\r\n  payload: employee,\r\n});\r\n\r\nexport const removeSelectedItem = (id: string) => ({\r\n  type: REMOVE_SELECTED_ITEM,\r\n  payload: id,\r\n});\r\n","export class EmployeesService {\r\n  _apiBase = 'https://yalantis-react-school-api.yalantis.com/api/task0/';\r\n\r\n  get = async (path: string) => {\r\n    const res = await fetch(`${this._apiBase}${path}`);\r\n\r\n    if (!res.ok) {\r\n      throw new Error(`Could not fetch ${path}, received ${res.status}`);\r\n    }\r\n\r\n    return await res.json();\r\n  };\r\n\r\n  getEmployees = async () => {\r\n      return await this.get('users');\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addSelectedItem, removeSelectedItem } from 'store/actions/employeesActions';\r\n// interfaces\r\nimport { EmployeesState } from 'interfaces/Employees';\r\nimport { LetterEmployeeItemProps } from 'interfaces/Props';\r\n\r\nexport const LetterEmployeeItem = ({ employee }: LetterEmployeeItemProps) => {\r\n  const { firstName, lastName } = employee;\r\n  const { selectedItems } = useSelector((state: EmployeesState) => state);\r\n  const selected = selectedItems.findIndex(item => item.id === employee.id) !== -1;\r\n  const dispatch = useDispatch();\r\n\r\n  const onChangeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    event.target.value === 'add'\r\n      ? dispatch(addSelectedItem(employee))\r\n      : dispatch(removeSelectedItem(employee.id));\r\n  };\r\n\r\n  return (\r\n    <div className=\"employee__wrapper\">\r\n      <p>{`${lastName} ${firstName}`}</p>\r\n\r\n      <div className=\"radio__group\">\r\n        <div>\r\n          <input\r\n            type=\"radio\"\r\n            value=\"remove\"\r\n            onChange={onChangeValue}\r\n            checked={!selected}\r\n          />\r\n          Not active\r\n        </div>\r\n        <div>\r\n          <input type=\"radio\" value=\"add\" onChange={onChangeValue} checked={selected} />\r\n          Active\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n// components\r\nimport { LetterEmployeeItem } from './LetterEmployeeItem';\r\n//interfaces\r\nimport { LetterItemProps } from 'interfaces/Props';\r\n\r\nexport const LetterItem = ({ item }: LetterItemProps) => {\r\n  const { letter, items } = item;\r\n\r\n  return (\r\n    <div className=\"letter__wrapper\">\r\n      <h2>{letter}</h2>\r\n      <div className=\"employees__list\">\r\n        {items.length === 0\r\n          ? '______'\r\n          : items.map((employee) => {\r\n              return <LetterEmployeeItem key={employee.id} employee={employee} />;\r\n            })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n// components\r\nimport { LetterItem } from './LetterItem';\r\n// utils\r\nimport { transformToAlphabetList } from 'utils/employees';\r\n// interfaces\r\nimport { EmployeesState } from 'interfaces/Employees';\r\n// styles\r\nimport './styles.css';\r\n\r\nconst AlphabetEmployeesList = () => {\r\n  const { items } = useSelector((state: EmployeesState) => state);\r\n\r\n  const alphabetEmployeesList = transformToAlphabetList(items, 'lastName');\r\n\r\n  return (\r\n    <div className=\"letters__wrapper\">\r\n      <h1>Employees</h1>\r\n\r\n      <div className=\"letter__list\">\r\n        {alphabetEmployeesList.map((item, index) => {\r\n          return <LetterItem key={index} item={item} />;\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlphabetEmployeesList;\r\n","import moment from 'moment';\r\nimport { TransformToAlphabetList, TransformToMonthList } from 'interfaces/Employees';\r\n\r\nexport const transformToAlphabetList: TransformToAlphabetList = (list, sortField) => {\r\n  const alphabetArray = Array.from(Array(26)).map((item, idx) => idx + 65);\r\n\r\n  const transformList = alphabetArray.map(item => {\r\n    const letter = String.fromCharCode(item);\r\n\r\n    const filterItems = list.filter(item => {\r\n      // @ts-ignore\r\n      return letter.toUpperCase() === item[sortField][0].toUpperCase();\r\n    });\r\n\r\n    const sortItems = filterItems.sort((a, b) => {\r\n      // @ts-ignore\r\n      const sortFieldA = a[sortField];\r\n      // @ts-ignore\r\n      const sortFieldB = b[sortField];\r\n\r\n      if (sortFieldA < sortFieldB) return -1;\r\n      if (sortFieldA > sortFieldB) return 1;\r\n      return 0;\r\n    });\r\n\r\n    return {\r\n      letter,\r\n      items: sortItems,\r\n    };\r\n  });\r\n\r\n  return transformList;\r\n};\r\n\r\nexport const transformToMonthList: TransformToMonthList = (list, sortField) => {\r\n  const monthsArray = Array.from({ length: 12 }, (e, i) => {\r\n    // @ts-ignore\r\n    return new Date(null, i + 1, null).toLocaleDateString('en', { month: 'long' });\r\n  });\r\n\r\n  const completeTaskMonthIndex = 4;\r\n  const firstPart = monthsArray.slice(0, completeTaskMonthIndex);\r\n  const secondPart = monthsArray.slice(completeTaskMonthIndex);\r\n\r\n  const transformList = [...secondPart, ...firstPart].map(month => {\r\n    const filterItems = list.filter(item => {\r\n      return moment(item.dob).format('MMMM') === month;\r\n    });\r\n\r\n    const sortItems = filterItems.sort((a, b) => {\r\n      // @ts-ignore\r\n      const sortFieldA = a[sortField];\r\n      // @ts-ignore\r\n      const sortFieldB = b[sortField];\r\n\r\n      if (sortFieldA < sortFieldB) return -1;\r\n      if (sortFieldA > sortFieldB) return 1;\r\n      return 0;\r\n    });\r\n\r\n    return {\r\n      month: month,\r\n      items: sortItems,\r\n    };\r\n  });\r\n\r\n  return transformList;\r\n};\r\n","import React from 'react';\r\nimport moment from 'moment';\r\n// interfaces\r\nimport { MonthEmployeeItemProps } from 'interfaces/Props';\r\n\r\nexport const MonthEmployeeItem = ({ item }: MonthEmployeeItemProps) => {\r\n  const { firstName, lastName, dob } = item;\r\n  const birthday = moment(dob).format('D MMMM YYYY');\r\n\r\n  return (\r\n    <li>\r\n      {lastName} {firstName} - {birthday} year\r\n    </li>\r\n  );\r\n};\r\n","import React from 'react';\r\n// components\r\nimport { MonthEmployeeItem } from './MonthEmployeeItem';\r\n// interfaces\r\nimport { MonthItemProps } from 'interfaces/Props';\r\n\r\nexport const MonthItem = ({ item }: MonthItemProps) => {\r\n  const { month, items } = item;\r\n\r\n  return (\r\n    <>\r\n      <h2>{month}</h2>\r\n      <ul>\r\n        {items.map(item => {\r\n          return <MonthEmployeeItem key={item.id} item={item} />;\r\n        })}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n// components\r\nimport { MonthItem } from './MonthItem';\r\n// interfaces\r\nimport { EmployeesState } from 'interfaces/Employees';\r\n// utils\r\nimport { transformToMonthList } from 'utils/employees';\r\n// styles\r\nimport './styles.css';\r\n\r\nconst MonthEmployeesList = () => {\r\n  const { selectedItems } = useSelector((state: EmployeesState) => state);\r\n\r\n  const monthEmployeesList = transformToMonthList(selectedItems, 'lastName');\r\n\r\n  const monthList = monthEmployeesList.map(month => {\r\n    if (month.items.length > 0) {\r\n      return <MonthItem item={month} />;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"birthday__wrapper\">\r\n      <h1>Employees birthday</h1>\r\n      <div className=\"month__list\">\r\n        {!!selectedItems.length ? monthList : 'Employees List is empty'}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonthEmployeesList;\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n// store\r\nimport { fetchEmployees } from 'store/actions/employeesActions';\r\n// components\r\nimport AlphabetEmployeesList from 'components/AlphabetEmployeesList';\r\nimport MonthEmployeesList from 'components/MonthEmployeesList';\r\n// interfaces\r\nimport { EmployeesState } from 'interfaces/Employees';\r\n\r\nexport const Employees = () => {\r\n  const { loading } = useSelector((state: EmployeesState) => state);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchEmployees());\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <h1>loading...</h1>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"employees__page\">\r\n      <AlphabetEmployeesList />\r\n      <MonthEmployeesList />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nexport const NotFoundPage = () => {\r\n  return <h1>NotFoundPage</h1>;\r\n};\r\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\n// pages\nimport { Employees } from 'pages/Employees';\nimport { NotFoundPage } from 'pages/NotFoundPage';\n\nconst App = () => {\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <Redirect to=\"/employees\" />\n      </Route>\n\n      <Route exact path=\"/employees\" component={Employees} />\n\n      <Route render={() => <NotFoundPage />} />\n    </Switch>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}